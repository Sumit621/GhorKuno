{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, PASSWORD_RESET_CONFIRM_FAIL, SIGNUP_SUCCESS, SIGNUP_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, GOOGLE_AUTH_SUCCESS, GOOGLE_AUTH_FAIL, FACEBOOK_AUTH_SUCCESS, FACEBOOK_AUTH_FAIL, LOGOUT } from \"./types\";\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.getItem(\"access\")}`,\n        Accept: \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const googleAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n    const details = {\n      state: state,\n      code: code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key])).join(\"&\");\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n      dispatch({\n        type: GOOGLE_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: GOOGLE_AUTH_FAIL\n      });\n    }\n  }\n};\nexport const facebookAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n    const details = {\n      state: state,\n      code: code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key])).join(\"&\");\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`, config);\n      dispatch({\n        type: FACEBOOK_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: FACEBOOK_AUTH_FAIL\n      });\n    }\n  }\n};\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem(\"access\")\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== \"token_not_valid\") {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/WebProject/frontend/src/redux/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_FAIL","FACEBOOK_AUTH_SUCCESS","FACEBOOK_AUTH_FAIL","LOGOUT","load_user","dispatch","localStorage","getItem","config","headers","Authorization","Accept","res","get","process","env","REACT_APP_API_URL","type","payload","data","err","googleAuthenticate","state","code","details","formBody","Object","keys","map","key","encodeURIComponent","join","post","facebookAuthenticate","checkAuthenticated","body","JSON","stringify","token","login","email","password","signup","first_name","last_name","re_password","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  USER_LOADED_SUCCESS,\r\n  USER_LOADED_FAIL,\r\n  AUTHENTICATED_SUCCESS,\r\n  AUTHENTICATED_FAIL,\r\n  PASSWORD_RESET_SUCCESS,\r\n  PASSWORD_RESET_FAIL,\r\n  PASSWORD_RESET_CONFIRM_SUCCESS,\r\n  PASSWORD_RESET_CONFIRM_FAIL,\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_FAIL,\r\n  ACTIVATION_SUCCESS,\r\n  ACTIVATION_FAIL,\r\n  GOOGLE_AUTH_SUCCESS,\r\n  GOOGLE_AUTH_FAIL,\r\n  FACEBOOK_AUTH_SUCCESS,\r\n  FACEBOOK_AUTH_FAIL,\r\n  LOGOUT,\r\n} from \"./types\";\r\n\r\nexport const load_user = () => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `JWT ${localStorage.getItem(\"access\")}`,\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/auth/users/me/`,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: USER_LOADED_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: USER_LOADED_FAIL,\r\n      });\r\n    }\r\n  } else {\r\n    dispatch({\r\n      type: USER_LOADED_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const googleAuthenticate = (state, code) => async (dispatch) => {\r\n  if (state && code && !localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n    };\r\n\r\n    const details = {\r\n      state: state,\r\n      code: code,\r\n    };\r\n\r\n    const formBody = Object.keys(details)\r\n      .map(\r\n        (key) =>\r\n          encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key])\r\n      )\r\n      .join(\"&\");\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: GOOGLE_AUTH_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n\r\n      dispatch(load_user());\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GOOGLE_AUTH_FAIL,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const facebookAuthenticate = (state, code) => async (dispatch) => {\r\n  if (state && code && !localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n    };\r\n\r\n    const details = {\r\n      state: state,\r\n      code: code,\r\n    };\r\n\r\n    const formBody = Object.keys(details)\r\n      .map(\r\n        (key) =>\r\n          encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key])\r\n      )\r\n      .join(\"&\");\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: FACEBOOK_AUTH_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n\r\n      dispatch(load_user());\r\n    } catch (err) {\r\n      dispatch({\r\n        type: FACEBOOK_AUTH_FAIL,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const checkAuthenticated = () => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({ token: localStorage.getItem(\"access\") });\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/auth/jwt/verify/`,\r\n        body,\r\n        config\r\n      );\r\n\r\n      if (res.data.code !== \"token_not_valid\") {\r\n        dispatch({\r\n          type: AUTHENTICATED_SUCCESS,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: AUTHENTICATED_FAIL,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: AUTHENTICATED_FAIL,\r\n      });\r\n    }\r\n  } else {\r\n    dispatch({\r\n      type: AUTHENTICATED_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      `${process.env.REACT_APP_API_URL}/auth/jwt/create/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(load_user());\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const signup =\r\n  (first_name, last_name, email, password, re_password) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n      first_name,\r\n      last_name,\r\n      email,\r\n      password,\r\n      re_password,\r\n    });\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/auth/users/`,\r\n        body,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: SIGNUP_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: SIGNUP_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const verify = (uid, token) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ uid, token });\r\n\r\n  try {\r\n    await axios.post(\r\n      `${process.env.REACT_APP_API_URL}/auth/users/activation/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: ACTIVATION_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ACTIVATION_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const reset_password = (email) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email });\r\n\r\n  try {\r\n    await axios.post(\r\n      `${process.env.REACT_APP_API_URL}/auth/users/reset_password/`,\r\n      body,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: PASSWORD_RESET_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PASSWORD_RESET_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const reset_password_confirm =\r\n  (uid, token, new_password, re_new_password) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n\r\n    try {\r\n      await axios.post(\r\n        `${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`,\r\n        body,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: PASSWORD_RESET_CONFIRM_SUCCESS,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PASSWORD_RESET_CONFIRM_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}